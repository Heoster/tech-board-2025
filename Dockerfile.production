# Multi-stage build for Tech Board 2025 Production
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++ curl

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY server/package*.json ./server/
COPY client/package*.json ./client/

# Install dependencies
RUN npm ci --only=production --silent
RUN cd server && npm ci --only=production --silent
RUN cd client && npm ci --silent

# Copy source code
COPY . .

# Build React frontend
RUN cd client && npm run build

# Copy frontend build to server public directory
RUN mkdir -p server/public && cp -r client/dist/* server/public/

# Production stage
FROM node:18-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache curl dumb-init

# Create app user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S techboard -u 1001

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=techboard:nodejs /app/server ./server
COPY --from=builder --chown=techboard:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=techboard:nodejs /app/package*.json ./
COPY --from=builder --chown=techboard:nodejs /app/complete-production-server.js ./
COPY --from=builder --chown=techboard:nodejs /app/production.env ./

# Create necessary directories
RUN mkdir -p server/database server/logs && chown -R techboard:nodejs server/

# Switch to non-root user
USER techboard

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the complete production server
CMD ["node", "complete-production-server.js"]
